#!/bin/bash
# Copyright 2010 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

. ${HOME}/etc/shell.conf
  
tempdir=${HOME}/tmp
resize=600

PIDS=""

####$ 
function _usage {
  echo "Usage: ${0##*/} -a[ll] -q[uiet] -v[erbose] [-h host] [-d display]" >&2
  echo "For a nice montage of all screens, try ${0##*/} -a" >&2
}

##### Parse command line arguments
host=""
display=""
alldisplays=0
quiet=0
verbose=0
while getopts ":ad:h:qv" opt; do
  case $opt in
    a)
      alldisplays=1;;
    q)
      quiet=1;;
    v)
      verbose=1;;
    h)
      host=${OPTARG};;
    d)
      display=${OPTARG//[^0-9:.]};;
    \?)
      echo "Invalid argument: -${OPTARG}" >&2
      _usage
      exit 1
      ;;
    :)
      echo "You must specify options to ${0##*/}!" >&2
      _usage
      exit 1
      ;;
  esac
done

##### Grab a Single Screen
# _grab_screen {host} {display} {tempfile}
function _grab_screen {
  [ $verbose -gt 0 ] && echo "grabbing: ${1} ${2} ${3}"
  rm -f ${3}
  screen_status=$(grep -w ${1} /tmp/screens_status 2>/dev/null | awk -F '|' {'print $2 $3'} | sed s/'|'/'\n'/g | sed s/','/'\n'/g)
  ssh -fqx lg@${1} "(
upSeconds=\$(</proc/uptime)
upSeconds=\${upSeconds%%.*}
let mins=\$((\${upSeconds}/60%60))
let hours=\$((\${upSeconds}/3600%24))
let days=\$((\${upSeconds}/86400))

echo -en \"\$(hostname) up: \"
if [ \"\${days}\" -ne \"0\" ]
then
   echo -en \"\${days}d \"
fi
echo -en \"\${hours}h \${mins}m\n\"
echo -en \"${screen_status}\"
) | convert -pointsize 18 -background '#00000080' -fill white text:- -trim -bordercolor '#00000080' -border 5x5 miff:/tmp/header-img-${2##*.};
echo -en \"GPID: \$( pgrep googleearth-bin ). SQPID: \$( pgrep -f sbin\/squid3 ).\nCRASH: \$( ls -1 ~/.googleearth/crashlogs/ | wc -l ). MEMF: \$( awk '/^MemFree/ {print \$2\$3}' /proc/meminfo ).\" | convert -pointsize 18 -background '#00000080' -fill white text:- -trim -bordercolor '#00000080' -border 5x5 miff:/tmp/footer-img-${2##*.};
xwd -display ${2} -root -silent | composite -gravity north -geometry +0+3 miff:/tmp/header-img-${2##*.} xwd:- -resize ${resize} miff:- | composite -gravity south -geometry +0+3 miff:/tmp/footer-img-${2##*.} miff:- miff:- | convert -bordercolor 'black' -border 5x0 miff:- miff:-
" > ${3} &
  PIDS="${PIDS} $!"
  MTAGE_FILES=( ${MTAGE_FILES[*]} ${3} )
}

##### Logic Begins

SANITIZE_D=${display//:}

${HOME}/bin/lg-ctl-master

if [ $alldisplays -gt 0 ]; then
  [ ! $quiet -gt 0 ] && echo "Grabbing all screens from all hosts"
  for target in ${LG_SCREENORDER?"LG_SCREENORDER must be set to use -a[ll].  Add it to ~/etc/shell.conf"}; do
    lg=${target//:*}
    display=${target/${lg}}
    tempfile=${tempdir}/${lg}.${display//*.}.miff
    _grab_screen ${lg} ${display} ${tempfile}
  done
elif [ -n "$host" ]; then
  if [ -n "$display" ]; then
    [ ! $quiet -gt 0 ] && echo "Grabbing display: ${display} from host: ${host}"
    if [[ ! "${SANITIZE_D}" =~ .\.. ]]; then
      for screen in {0..3}; do
        _grab_screen ${host} ${display}.${screen} ${tempdir}/${host}.${screen}.miff
      done
    else
      _grab_screen ${host} ${display} ${tempdir}/${host}.miff
    fi
  else
    echo "You must specify a display when specifying a host!" >&2
    _usage
    exit 1
  fi
elif [ -n "$display" ]; then
  [ ! $quiet -gt 0 ] && echo "Grabbing display: ${display} from all hosts"
  for lg in $LG_FRAMES; do
    if [[ ! "${SANITIZE_D}" =~ .\.. ]]; then
      for screen in {0..3}; do
        _grab_screen ${lg} ${display}.${screen} ${tempdir}/${lg}.${screen}.miff
      done
    else
      _grab_screen ${lg} ${display} ${tempdir}/${lg}.miff
    fi
  done
else
  echo "Not enough arguments to ${0##*/}!" >&2
  _usage
  exit 1
fi

for job in ${PIDS[*]}; do
  wait $job
done

for file in ${MTAGE_FILES[*]}; do
  if [ -s $file ]; then
    MTAGE_CHECKED=( ${MTAGE_CHECKED[*]} $file )
  fi
done

if [ ${#MTAGE_CHECKED[*]} -lt 1 ]; then
  echo "Nothing to montage!" >&2
  exit 1
fi

monitor=""
if [ ! $quiet -gt 0 ]; then
  echo "TEMP FILES:
  ALL:   ${MTAGE_CHECKED[*]}
  COUNT: ${#MTAGE_CHECKED[*]}
  "
  monitor="-monitor"
fi

montage ${monitor} -background black -tile ${#MTAGE_CHECKED[*]}x1 -geometry +0+0 \
  ${MTAGE_CHECKED[*]} \
  ${tempdir}/lg-montage.png

rm -f ${MTAGE_FILES[*]}

#exit 0
