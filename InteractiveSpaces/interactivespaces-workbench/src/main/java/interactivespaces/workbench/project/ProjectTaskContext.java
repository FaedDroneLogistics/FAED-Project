/*
 * Copyright (C) 2012 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package interactivespaces.workbench.project;

import interactivespaces.util.io.FileSupport;
import interactivespaces.util.io.FileSupportImpl;
import interactivespaces.workbench.project.activity.type.ProjectType;
import interactivespaces.workbench.project.builder.ProjectBuilder;
import interactivespaces.workbench.tasks.WorkbenchTaskContext;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;

import java.io.File;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * A context for building and packaging activities.
 *
 * @author Keith M. Hughes
 */
public class ProjectTaskContext implements ProjectContext {

  /**
   * Where things are being built.
   */
  private static final String BUILD_DIRECTORY = "build";

  /**
   * Static file support instance.
   */
  private static final FileSupport FILE_SUPPORT = FileSupportImpl.INSTANCE;

  /**
   * Extension for creating temp build directories.
   */
  public static final String TEMP_DIRECTORY_EXTENSION = ".dir";

  /**
   * Sub-directory in which to put temp build files.
   */
  public static final String BUILD_TEMP_DIRECTORY = "tmp";

  /**
   * The project being built.
   */
  private final Project project;

  /**
   * The task context for building.
   */
  private final WorkbenchTaskContext taskContext;

  /**
   * Files to include in the project.
   */
  private final List<File> artifactsToInclude = Lists.newArrayList();

  /**
   * Files generated by the project.
   */
  private final List<File> generatedArtifacts = Lists.newArrayList();

  /**
   * The directory where the project will be built.
   */
  private final File buildDirectory;

  /**
   * The project type of the project.
   */
  private final ProjectType projectType;

  /**
   * Project task contexts for projects which this project is dependent on.
   */
  private final Set<ProjectTaskContext> dynamicProjectDependencyContexts = Sets.newHashSet();

  /**
   * Collection of dest to src file mappings, constructed during the build process.
   */
  private final Map<File, File> sourceMap = Maps.newHashMap();

  /**
   * Construct a new build context.
   *
   * @param projectType
   *          the type of the project
   * @param project
   *          project object
   * @param taskContext
   *          workbench instance
   */
  public ProjectTaskContext(ProjectType projectType, Project project, WorkbenchTaskContext taskContext) {
    this.projectType = projectType;
    this.project = project;
    this.taskContext = taskContext;

    buildDirectory = new File(project.getBaseDirectory(), BUILD_DIRECTORY);
    FILE_SUPPORT.directoryExists(buildDirectory);

    prepareProjectConfiguration();
  }

  @Override
  public <T extends Project> T  getProject() {
    return (T)project;
  }

  @Override
  public WorkbenchTaskContext getWorkbenchTaskContext() {
    return taskContext;
  }

  @Override
  @SuppressWarnings("unchecked")
  public <T extends ProjectType> T getProjectType() {
    return (T) projectType;
  }

  /**
   * Add anything needed to the project configuration.
   */
  private void prepareProjectConfiguration() {
    project.getConfiguration().setValue(ProjectBuilder.CONFIGURATION_PROPERTY_PROJECT_HOME,
        project.getBaseDirectory().getAbsolutePath());
  }

  @Override
  public File getProjectTarget(File rootDirectory, String target) {
    String targetPath = project.getConfiguration().evaluate(target);
    File targetFile = new File(targetPath);
    if (targetFile.isAbsolute()) {
      return targetFile;
    }
    return new File(rootDirectory, targetPath);
  }

  @Override
  public Map<File, File> getResourceSourceMap() {
    return sourceMap;
  }

  /**
   * Get the root build directory.
   *
   * @return the root of the build directory
   */
  public File getBuildDirectory() {
    return buildDirectory;
  }

  /**
   * Get a unique temporary build directory.
   *
   * @return a temporary build directory
   */
  public File getTempBuildDirectory() {
    File tempDirectory = new File(buildDirectory, BUILD_TEMP_DIRECTORY);
    FILE_SUPPORT.mkdir(tempDirectory);
    File tempFile = FILE_SUPPORT.createTempFile(tempDirectory);
    return new File(tempDirectory, tempFile.getName() + TEMP_DIRECTORY_EXTENSION);
  }

  /**
   * Add a new artifact to go in the file.
   *
   * @param artifact
   *          artifact to add to context
   */
  public void addArtifactToInclude(File artifact) {
    artifactsToInclude.add(artifact);
  }

  /**
   * Get the list of artifacts to add to the project.
   *
   * @return the list of artifacts to add to the project
   */
  public List<File> getArtifactsToInclude() {
    return artifactsToInclude;
  }

  /**
   * Add a new generated artifact.
   *
   * @param artifact
   *          the generated artifact
   */
  public void addGeneratedArtifact(File artifact) {
    generatedArtifacts.add(artifact);
  }

  /**
   * Get the list of artifacts generated.
   *
   * <p>
   * Only valid after a build.
   *
   * @return the list of generated artifacts
   */
  public List<File> getGeneratedArtifacts() {
    return generatedArtifacts;
  }

  /**
   * Add a task context for a dynamic project dependency.
   *
   * @param dependencyTaskContext
   *          the dependency task context to add
   *
   * @return this context
   */
  public ProjectTaskContext addDynamicProjectDependencyContext(ProjectTaskContext dependencyTaskContext) {
    dynamicProjectDependencyContexts.add(dependencyTaskContext);

    return this;
  }

  /**
   * Add a task context for a dynamic project dependency.
   *
   * @param dependencyTaskContexts
   *          the dependency task contexts to add
   *
   * @return this context
   */
  public ProjectTaskContext addDynamicProjectDependencyContexts(Collection<ProjectTaskContext> dependencyTaskContexts) {
    dynamicProjectDependencyContexts.addAll(dependencyTaskContexts);

    return this;
  }

  /**
   * Get the project task contexts for all dynamic project dependencies.
   *
   * @return the dependency project task contexts
   */
  public Set<ProjectTaskContext> getDynamicProjectDependencyContexts() {
    return dynamicProjectDependencyContexts;
  }
}
